<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Research on A Hugo website</title>
    <link>/categories/research/</link>
    <description>Recent content in Research on A Hugo website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/categories/research/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Code and Data for the Social Sciences</title>
      <link>/1/01/01/code-and-data-for-the-social-sciences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/code-and-data-for-the-social-sciences/</guid>
      <description>Automate everything  Automate everything that can be automated. Write a single script that executes all code from beginning to end. 写一个terminal执行文件，可以执行不同软件的结果。 &amp;gt; let’s add another key script to the directory, called rundirectory.bat, which is a Windows shell script. Its contents look like this:  ---- rundirectory.bat ---- stattransfer export_to_csv.stc statase -b mergefiles.do statase -b cleandata.do statase -b regressions.do statase -b figures.do pdflatex tv_potato.tex  The rundirectory.bat script works like a roadmap.</description>
    </item>
    
    <item>
      <title>OCR for English and Chinese</title>
      <link>/1/01/01/ocr-for-english-and-chinese/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/ocr-for-english-and-chinese/</guid>
      <description>Version tesseract-3.04.01_2 and imagemagick-6.9.5-2
tesseract project in github
Install ImageMagick for image conversion:
brew install imagemagick  Install tesseract for OCR:
brew install tesseract --with-all-languages  Or install without --all-languages and install them manually as needed.
Make sure the input image is a grayscale .tif and fairly large. ~500x150 was too small, while ~2000*500 worked very well.
convert input.png -resize 400% -type Grayscale input.tif  OCR it. The default language is English.</description>
    </item>
    
    <item>
      <title>Reproducible Research</title>
      <link>/1/01/01/reproducible-research/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/reproducible-research/</guid>
      <description>Do not do things by hand
 remov outliers QA /QC validating editing tables and figures moving data around your computer down load data from a website  Do not use GUI (Point and Click)
 can not be repeated  Teach your computer to do the job
 even if you only do it once down load data from a website, unzip it   download.file(&amp;quot;http://-address- dataset.zip&amp;quot;, &amp;quot;project/dataset.zip&amp;quot;)   Do use some version control</description>
    </item>
    
    <item>
      <title>Several Public Data Sources</title>
      <link>/1/01/01/several-public-data-sources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/several-public-data-sources/</guid>
      <description>World Bank Data http://data.worldbank.org/
Topics on :
UNdata http://data.un.org/
 education fruit export poverty health indonesia web
 Population  Data USA https://www.data.gov/
Data USA, an online application developed by a team of data scientists at MIT Media Lab and Datawheel, backed by Deloitte is helping Americans visualize demographic and economic data using an open source platform.
中国国家统计局数据 http://data.stats.gov.cn/
Quandl https://www.quandl.com/
install.packages(&amp;quot;Quandl&amp;quot;) library(Quandl) data &amp;lt;- Quandl(&amp;quot;FRED/GDP&amp;quot;) head(data)  Topics on :</description>
    </item>
    
    <item>
      <title>Using MathJax on Github:Pages</title>
      <link>/1/01/01/using-mathjax-on-githubpages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/using-mathjax-on-githubpages/</guid>
      <description>Thanks A very useful post by Christopher Poole regarding how to use Latex in Github:Pages
However, the font of th latex is smaller than my content. To solve this problem, I add the code below to the  part of the default.html in the _layouts filefolder. It works! I can choose the scale number to scale up or down.
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; MathJax.Hub.Config({ extensions: [&amp;quot;tex2jax.js&amp;quot;], &amp;quot;HTML-CSS&amp;quot;: { scale: 150} }); &amp;lt;/script&amp;gt;  Usage Here is an example MathJax inline rendering \( 1/x^{2} \), and here is a block rendering:</description>
    </item>
    
    <item>
      <title>用R进行数据格式转换(SAS, Stata)</title>
      <link>/1/01/01/%E7%94%A8r%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2sas-stata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/%E7%94%A8r%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2sas-stata/</guid>
      <description>​ 我们在进行合作研究的时候，经常面临的的一个问题就是，一个Co-author给的数据集是stata格式的(.dta), 而我们用的是SAS，或者相反，还有很多研究者习惯用SAS清洗数据，完成后用Stata 跑回归，在这些情况下我们都会面临一个数据格式转换的问题，那么今天我们就来谈一下如何用R来帮助格式转换。
 为什么是R? 因为它是开源的，你可以在没有安装SAS和Stata的情况下完成.sas7bdat和.dta的转换
 看到R有些人可能就要关闭文章了，因为不想又学一个软件，其实，我们完成数据转换不需要真正的搞懂R的code，只需要跟着我一步一步来就可以了，比把大象装冰箱还简单。
 下载安装R 到R的官网下载安装对应平台的R程序。
 安装需要的packages
  # 类似于Stata的 ssc install install.packages(&#39;haven&#39;, repos = &#39;http://cran.us.r-project.org&#39;) # 表示我们要从R的官网安装一个包名字叫 haven  然后我们就可以用啦 ~
SAS 转 Stata 把下面的code粘贴单R的console里面，等着
library(haven) # 加载包 dataset &amp;lt;- read_sas(&amp;quot;C:/example.sas7bdat&amp;quot;) # 把SAS数据读进来 # 把它导出为14版本的stata数据 # version 可以是8 -14 的任何一个 # 你也可以借此完成不同的stata版本数据的转化 write_dta(dataset, &amp;quot;C:/example.dta&amp;quot;, version = 14)  Stata 转 SAS 把下面的code粘贴单R的console里面，等着
library(haven) # 加载包 dataset &amp;lt;- read_dta(&amp;quot;C:/example.dta&amp;quot;) # 把Stata数据读进来 write_sas(dataset, &amp;quot;C:/example.</description>
    </item>
    
  </channel>
</rss>