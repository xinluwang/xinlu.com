<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on A Hugo website</title>
    <link>/tags/r/</link>
    <description>Recent content in R on A Hugo website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linear Regression and group by in R</title>
      <link>/1/01/01/linear-regression-and-group-by-in-r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/linear-regression-and-group-by-in-r/</guid>
      <description>Here&amp;rsquo;s one way using the lme4 package.
&amp;gt; library(lme4) &amp;gt; d &amp;lt;- data.frame(state=rep(c(&#39;NY&#39;, &#39;CA&#39;), c(10, 10)), + year=rep(1:10, 2), + response=c(rnorm(10), rnorm(10))) &amp;gt; xyplot(response ~ year, groups=state, data=d, type=&#39;l&#39;) &amp;gt; fits &amp;lt;- lmList(response ~ year | state, data=d) &amp;gt; fits Call: lmList(formula = response ~ year | state, data = d) Coefficients: (Intercept) year CA -1.34420990 0.17139963 NY 0.00196176 -0.01852429 Degrees of freedom: 20 total; 16 residual Residual standard error: 0.</description>
    </item>
    
    <item>
      <title>R and Rstudio Tricks</title>
      <link>/1/01/01/r-and-rstudio-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/r-and-rstudio-tricks/</guid>
      <description>Shortcut  Alt+- gives the assign operator &amp;lt;- Ctrl+Alt+Left/right arrow switches between open files Ctrl+Space gives autocomplete options Ctrl+Left/right arrow jumps one word Ctrl+shift+C to un-comment, simply re-highlight and hit Ctrl+shift+C again. The Tab key on your keyboard will help you (particularly in RStudio) by offering ways to finish your code. If you start typing mea and hit tab, it will suggest mean() among other things. If you type mean(~hwy, data=vehicles, and hit tab, it will tell you the other arguments you can use for the mean() function.</description>
    </item>
    
    <item>
      <title>用R进行数据格式转换(SAS, Stata)</title>
      <link>/1/01/01/%E7%94%A8r%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2sas-stata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/%E7%94%A8r%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2sas-stata/</guid>
      <description>​ 我们在进行合作研究的时候，经常面临的的一个问题就是，一个Co-author给的数据集是stata格式的(.dta), 而我们用的是SAS，或者相反，还有很多研究者习惯用SAS清洗数据，完成后用Stata 跑回归，在这些情况下我们都会面临一个数据格式转换的问题，那么今天我们就来谈一下如何用R来帮助格式转换。
 为什么是R? 因为它是开源的，你可以在没有安装SAS和Stata的情况下完成.sas7bdat和.dta的转换
 看到R有些人可能就要关闭文章了，因为不想又学一个软件，其实，我们完成数据转换不需要真正的搞懂R的code，只需要跟着我一步一步来就可以了，比把大象装冰箱还简单。
 下载安装R 到R的官网下载安装对应平台的R程序。
 安装需要的packages
  # 类似于Stata的 ssc install install.packages(&#39;haven&#39;, repos = &#39;http://cran.us.r-project.org&#39;) # 表示我们要从R的官网安装一个包名字叫 haven  然后我们就可以用啦 ~
SAS 转 Stata 把下面的code粘贴单R的console里面，等着
library(haven) # 加载包 dataset &amp;lt;- read_sas(&amp;quot;C:/example.sas7bdat&amp;quot;) # 把SAS数据读进来 # 把它导出为14版本的stata数据 # version 可以是8 -14 的任何一个 # 你也可以借此完成不同的stata版本数据的转化 write_dta(dataset, &amp;quot;C:/example.dta&amp;quot;, version = 14)  Stata 转 SAS 把下面的code粘贴单R的console里面，等着
library(haven) # 加载包 dataset &amp;lt;- read_dta(&amp;quot;C:/example.dta&amp;quot;) # 把Stata数据读进来 write_sas(dataset, &amp;quot;C:/example.</description>
    </item>
    
  </channel>
</rss>